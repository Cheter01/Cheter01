class GeoIcon {
  constructor(selector, moving, latLong) {
    this.selector = document.querySelector(selector);
    this.moving = this.selector.querySelector(moving);
    this.latLong = document.querySelector(latLong);
    this.tl = new TimelineMax();
    this.move();
  }

  getLocation() {
    return new Promise((resolve, reject) => {
      if ("geolocation" in navigator) {
        /* geolocation is available */
        navigator.geolocation.getCurrentPosition(
          (geoposition) => {
            let coords = {
              lat: geoposition.coords.latitude,
              long: geoposition.coords.longitude
            }
            resolve(coords);
          },
          (error) => {
            console.log(error);
            reject(error);
          });
      } else {
        reject("No Geolocation support");
      }
    });
  }

  outputCoords(coords) {
    this.latLong.innerHTML = "Lat: " + coords.lat + "<br/> Long: " + coords.long;
  }

  move(coords) {
    this.getLocation()
      .then((coords) => {
        let svgWidth = this.selector.getAttribute('viewBox').split(' ')[2];
        let long = ((coords.long / 180) * svgWidth) * -1;
        this.tl.to(this.moving, 2, {
          x: long + 'px'
        });
        this.outputCoords(coords);
      })
      .catch((error) => {
        let output = "An error occured";
        const errorMessages = [
          "Permission was denied.<br/>Could not get location.", //1 PERMISSION_DENIED
          "Something went wrong.<br/>Your position is currently unavailable", //2 POSITION_UNAVAILABLE	
          "Things seems to be taking a while.<br/>We'll just leave it for now." //3 TIMEOUT
        ];
        if (typeof error == 'String') {
          output = error;
        } else {
          output = errorMessages[error.code - 1]; //Minus one, because arrays are zero indexed
        }
        this.tl.fromTo(this.selector, 0.5, {
          x: -1
        }, {
          x: 1,
          ease: RoughEase.ease.config({
            strength: 10,
            points: 5,
            template: Linear.easeNone,
            randomize: false
          }),
          clearProps: "x"
        }, "+=0.5")

        this.latLong.innerHTML = output;
      });
  }
}

new GeoIcon('#worldmap_icon', '.center-map-group', '.lat-long');